syntax = "proto3";

package lars;

/* Lars 系统的消息 ID */
enum MessageId {
    ID_UNKNOW                   = 0;    // proto3 enum第一个属性必须是0,用来占位
    ID_GetRouteRequest          = 1;    // 向DNS请求Route对应的关系的消息ID
    ID_GetRouteResponse         = 2;    // DNS回复的Route信息的消息ID
    ID_ReportStatusReques       = 3;    // 上报host调用状态信息请求信息ID
    ID_GetHostRequest           = 4;    // API发送请求host信息给LB Agent模块消息ID
    ID_GetHostResponse          = 5;    // Agent返回给API host信息的ID
    ID_ReportRequest            = 6;    // API report get_host的调用结果给agent的消息ID

    ID_API_GetRouteRequest      = 7;    // API 请求agent某个modid/cmdid的全部hosts信息的route 消息ID
    ID_API_GetRouteResponse     = 8;    // API report get_host的调用结果给agent的消息ID
}

/* Lars 系统返回Code */
enum LarsRetCode {
    RET_SUCC                    = 0;    // 成功
    RET_OVERLOAD                = 1;    // 过载
    RET_SYSTEM_ERR              = 2;    // 系统错误
    RET_NOEXIST                 = 3;    // 资源不存在
}

/* 管理 */
message HostInfo {
    uint32 ip = 1;
    uint32 port = 2;
}

/* 请求lars-dns route信息的消息内容 */
message GetRouteRequest {
    int32 modid = 1;
    int32 cmdid = 2;
}

/* lars_dns 回复的route信息消息内容 */
message GetRouteResponse {
    int32 modid = 1;
    int32 cmdid = 2;
    repeated HostInfo host = 3; // repeated 表示可以包含0个或多个,对应的文件会生成 host_size() 函数
}

/* 主机调用结果 */
message HostCallResult {
    int32 ip        = 1;        // 主机ip
    int32 port      = 2;        // 主机port
    uint32 succ     = 3;        // 调用成功
    uint32 err      = 4;        // 调用失败
    bool overload   = 5;        // 是否过载
}

/* 上报 负载均衡 调度数据 给lars_reporter的消息内容 */
message ReportStatusReq {
    int32 modid                         = 1;
    int32 cmdid                         = 2;
    int32 caller                        = 3;
    repeated HostCallResult results     = 4;
    uint32 ts                           = 5;
}

/* API请求agent获取host信息(UDP) */
message GetHostRequest {
    uint32 seq                          = 1;
    int32 modid                         = 2;
    int32 cmdid                         = 3;
}

/* Agent返回给API调用方host信息(UDP) */
message GetHostResponse {
    uint32 seq                          = 1;
    int32 modid                         = 2;
    int32 cmdid                         = 3;
    int32 retcode                       = 4;
    HostInfo host                       = 5;
}

/* API上报调用结果给Agent(UDP) */
/* API层与agent的请求互通协议 */
message ReportRequest {
    int32 modid = 1;
    int32 cmdid = 2;
    HostInfo host = 3;
    int32 retcode =4;
}